package utils

import (
	"testing"
	"golang.org/x/crypto/bcrypt"
)
/*
* Tests the MatchPasswords function. It generates a hash for a password we will use to compare against the one generated by the function
* Matching passwords: The input password matches the original password.
* Non-matching passwords: The input password is incorrect.
* Empty password: The input password is empty, to test the edge case.
* Scrambled passord: check whether the algorithm is strong enough to generate different hashes for permutations
*/
func TestMatchPasswords(t *testing.T) {
	password := "secret123"
	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)
	if err != nil {
		t.Fatalf("failed to hash password: %v", err)
	}

	tests := []struct {
		name           string
		hashedPassword string
		inputPassword  string
		expectedResult bool
		expectError    bool
	}{
		{
			name:           "Matching passwords",
			hashedPassword: string(hashedPassword),
			inputPassword:  password,
			expectedResult: true,
			expectError:    false,
		},
		{
			name:           "Non-matching passwords",
			hashedPassword: string(hashedPassword),
			inputPassword:  "wrongpassword",
			expectedResult: false,
			expectError:    false,
		},
		{
			name:           "Empty input password",
			hashedPassword: string(hashedPassword),
			inputPassword:  "",
			expectedResult: false,
			expectError:    false,
		},
		{
			name:           "Scrambled password",
			hashedPassword: string(hashedPassword),
			inputPassword:  "123secret",
			expectedResult: false,
			expectError:    false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result, err := MatchPasswords(tt.hashedPassword, tt.inputPassword)
			if result != tt.expectedResult {
				t.Errorf("expected result %v, got %v", tt.expectedResult, result)
			}
			if (err != nil) != tt.expectError {
				t.Errorf("expected error %v, got %v", tt.expectError, err != nil)
			}
		})
	}
}
